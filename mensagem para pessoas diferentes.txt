Para enviar uma mensagem para um usuário específico usando Socket.IO, você pode usar um identificador único de cada cliente, como o socket.id, para direcionar a mensagem para o destinatário. Aqui está um exemplo de como você pode fazer isso tanto no backend (Flask) quanto no frontend (React Native).

Passo 1: Enviar uma mensagem para um usuário específico no Backend (Flask)
No Flask, você pode emitir uma mensagem para um cliente específico usando o socket.id, que é o identificador único de cada conexão.

Exemplo:
Quando um cliente envia uma mensagem, ele inclui o recipientId (o ID do destinatário) no evento.

No servidor, você envia a mensagem de volta apenas para o cliente com esse recipientId.

Código no servidor (Flask):

python
Copiar código
from flask import Flask
from flask_socketio import SocketIO, emit, join_room, leave_room

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

# Armazenar os usuários conectados
users = {}

# Quando um cliente se conecta, você pode armazenar o socket_id junto com um identificador do usuário
@socketio.on('connect')
def handle_connect():
    # Você pode salvar o socket_id associado ao usuário, como o email ou nome de usuário
    users['user1'] = request.sid  # 'user1' é o identificador do usuário, pode ser substituído pelo ID real

# Quando um cliente envia uma mensagem, inclua o 'recipientId' (id do destinatário)
@socketio.on('sendMessage')
def handle_message(data):
    recipient_id = data['recipientId']  # ID do destinatário
    message = data['message']  # A mensagem enviada pelo cliente
    sender_id = request.sid  # O ID do remetente (o socket_id do cliente)

    # Verifique se o destinatário está conectado
    if recipient_id in users:
        recipient_socket_id = users[recipient_id]
        emit('receiveMessage', {'senderId': sender_id, 'message': message}, room=recipient_socket_id)
    else:
        print(f"Usuário {recipient_id} não está conectado.")

@app.route('/')
def index():
    return "Servidor de chat ativo!"

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=3000)
Passo 2: Enviar uma mensagem para um destinatário específico no Frontend (React Native)
No frontend, você pode passar o recipientId quando envia a mensagem.

Exemplo:
Ao enviar a mensagem, você inclui o recipientId no objeto de dados que será enviado ao servidor.
Código no cliente (React Native):

javascript
Copiar código
import React, { useState, useEffect } from 'react';
import { View } from 'react-native';
import { GiftedChat } from 'react-native-gifted-chat';
import io from 'socket.io-client';

const ChatScreen = () => {
  const [messages, setMessages] = useState([]);
  const [socket, setSocket] = useState(null);
  const [recipientId, setRecipientId] = useState('user1');  // ID do destinatário

  useEffect(() => {
    // Conectar ao servidor Socket.IO
    const socketConnection = io('http://192.168.1.5:3000'); // Substitua pelo IP correto

    setSocket(socketConnection);

    // Ouvir mensagens recebidas do servidor
    socketConnection.on('receiveMessage', (data) => {
      console.log('Mensagem recebida:', data);
      setMessages((previousMessages) =>
        GiftedChat.append(previousMessages, {
          _id: Math.random().toString(36).substring(7),  // Gerar um ID único para a mensagem
          text: data.message,
          user: { _id: data.senderId },
        })
      );
    });

    return () => {
      socketConnection.disconnect();
    };
  }, []);

  const onSend = (newMessages = []) => {
    if (socket) {
      const message = newMessages[0];

      // Enviar a mensagem para o servidor, incluindo o 'recipientId'
      socket.emit('sendMessage', {
        recipientId: recipientId,  // ID do destinatário
        message: message.text,  // Conteúdo da mensagem
      });

      setMessages((previousMessages) =>
        GiftedChat.append(previousMessages, newMessages)
      );
    }
  };

  return (
    <View style={{ flex: 1 }}>
      <GiftedChat
        messages={messages}
        onSend={(messages) => onSend(messages)}
        user={{
          _id: 1, // ID do usuário, pode ser alterado conforme necessário
          name: 'User',
        }}
      />
    </View>
  );
};

export default ChatScreen;
Explicação:
Servidor Flask:

O servidor mantém um dicionário users, onde as chaves são os identificadores dos usuários e os valores são os socket.id dos clientes conectados.
Quando o servidor recebe uma mensagem, ele verifica se o destinatário está conectado, e se sim, envia a mensagem apenas para esse destinatário.
Cliente React Native:

O cliente mantém o estado recipientId, que indica o ID do destinatário da mensagem.
Quando o usuário envia uma mensagem, o cliente emite o evento sendMessage para o servidor, incluindo o recipientId e a mensagem.
O cliente ouve o evento receiveMessage para exibir as mensagens recebidas.
Considerações:
Gerenciamento de Conexões: No exemplo, estamos salvando as conexões no servidor para saber quais usuários estão conectados. Em um sistema real, você pode querer usar um banco de dados ou outra estratégia para persistir essas informações.
Identificadores dos Usuários: Certifique-se de que o recipientId seja único para cada usuário, como um ID de usuário ou email, dependendo de como você deseja identificar os destinatários.
Com isso, você estará enviando mensagens para usuários específicos e garantindo que o chat seja direcionado corretamente!